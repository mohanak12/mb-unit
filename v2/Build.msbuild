<Project DefaultTargets="Clean;Build;Test" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
  <!-- Configure the modules. -->
  <PropertyGroup>
    <RootDir>$(MSBuildProjectDirectory)</RootDir>
  </PropertyGroup>
  <ItemGroup>
    <NestedModule Include="Build.module" />
  </ItemGroup>

  <Import Project="$(RootDir)\Module.targets" />

  <!-- Configure other properties. -->
  <PropertyGroup>
    <Version Condition="'$(Version)'==''">0.0.0.0</Version>
    
    <ShowReports Condition="'$(ShowReports)'==''">true</ShowReports>
    <ReportTypes Condition="'$(ReportTypes)'==''">Html</ReportTypes>

    <TargetFX1_1 Condition="'$(TargetFX1_1)'==''">true</TargetFX1_1>

    <SandcastlePath>$(ProgramFiles)\Sandcastle</SandcastlePath>
    <SandcastleHelpFileBuilderPath>$(SHFBROOT)</SandcastleHelpFileBuilderPath>
    <HTMLHelpCompilerPath>$(ProgramFiles)\HTML Help Workshop\hhc.exe</HTMLHelpCompilerPath>
    <NSISPath>$(ProgramFiles)\NSIS\makensis.exe</NSISPath>
    <SourceServerIndexerPath>$(ProgramFiles)\Debugging Tools for Windows\sdk\srcsrv\ssindex.cmd</SourceServerIndexerPath>

    <CSharpProperties>
      Configuration=Release;
      Version=$(Version);
      TargetFX1_1=$(TargetFX1_1);
      BaseFX1_1OutputPath=bin\;
      OutputPath=bin\;
      BaseIntermediateOutputPath=obj\;
      CustomAfterMicrosoftCommonTargets=$(RootDir)\Build.Custom.Targets
    </CSharpProperties>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOnTargets>
      RecursiveBeforeBuild;
      BuildCSharpProjects;
      RecursiveAfterBuild;
      CopyFiles
    </BuildDependsOnTargets>
    <RebuildDependsOnTargets>
      RecursiveBeforeBuild;
      RebuildCSharpProjects;
      RecursiveAfterBuild;
      CopyFiles
    </RebuildDependsOnTargets>
    <CleanDependsOnTargets>
      CleanCSharpProjects;
      RemoveBuildDir;
    </CleanDependsOnTargets>
  </PropertyGroup>

  <Target Name="Release"
          DependsOnTargets="Clean;Build;Test;BuildSourceServerIndex;BuildDocs;BuildInstaller;BuildZip" />

  <Target Name="Build"
          DependsOnTargets="$(BuildDependsOnTargets)" />

  <Target Name="Rebuild"
          DependsOnTargets="$(RebuildDependsOnTargets)" />

  <Target Name="Clean"
          DependsOnTargets="$(CleanDependsOnTargets)">
  </Target>

  <Target Name="RemoveBuildDir">
    <RemoveDir Directories="$(BuildDir)"
               Condition="Exists('$(BuildDir)')" />
  </Target>

  <PropertyGroup>
    <MbUnitConsArgs>/report-type:$(ReportTypes) /report-name-format:test-report /report-folder:&quot;$(BuildReportsDir)&quot; @(TestAssembly->'&quot;%(Identity)&quot;', ' ')</MbUnitConsArgs>
    <MbUnitConsArgs Condition="$(ShowReports)">$(MbUnitConsArgs) /show-reports</MbUnitConsArgs>
  </PropertyGroup>
  <Target Name="Test">
    <Exec Command="&quot;$(TargetDir)\bin\MbUnit.cons.exe&quot; $(MbUnitConsArgs)"
          WorkingDirectory="$(BuildTempDir)"
          IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="MbUnitExitCode" />
    </Exec>

    <Warning Text="Some tests failed!"
             Condition="'$(MbUnitExitCode)'!='0'" />
  </Target>

  <Target Name="BuildCSharpProjects">
    <MSBuild Projects="@(CSharpProject)"
             Targets="Build"
             Properties="$(CSharpProperties)" />
  </Target>

  <Target Name="RebuildCSharpProjects">
    <MSBuild Projects="@(CSharpProject)"
             Targets="Rebuild"
             Properties="$(CSharpProperties)" />
  </Target>

  <Target Name="CleanCSharpProjects">
    <MSBuild Projects="@(CSharpProject)"
             Targets="Clean"
             Properties="$(CSharpProperties)" />
  </Target>

  <Target Name="CopyFiles"
          DependsOnTargets="CreateBuildDir">
    <Message Text="Copying files to target folder..." Importance="High" />

    <Copy SourceFiles="@(Binary)"
          DestinationFolder="$(TargetBinDir)\%(Binary.Folder)\%(RecursiveDir)" />
    <Copy SourceFiles="@(Document)"
          DestinationFolder="$(TargetDocsDir)\%(Document.Folder)\%(RecursiveDir)" />
    <Copy SourceFiles="@(Extra)"
          DestinationFolder="$(TargetExtrasDir)\%(Extra.Folder)\%(RecursiveDir)" />
    <Copy SourceFiles="@(File)"
          DestinationFolder="$(TargetDir)\%(File.Folder)\%(RecursiveDir)" />
  </Target>

  <Target Name="BuildInstaller"
          DependsOnTargets="CreateBuildDir">
    <Warning Text="The NSIS tools must be installed to generate the installer.  Look in libs\Setup Files for the NSIS installer."
             Condition="! Exists('$(NSISPath)')" />

    <Exec Command="&quot;$(NSISPath)&quot; /V2 /NOCONFIG /DVERSION=$(Version) /DROOTDIR=&quot;$(RootDir)&quot; &quot;$(SourceDir)\installer\MbUnit.nsi&quot;"
          Condition="Exists('$(NSISPath)')" />
  </Target>

  <PropertyGroup>
    <WebDocsParentDir>$(BuildReleaseDir)\APIDocs</WebDocsParentDir>
    <WebDocsDir>$(WebDocsParentDir)\$(Version)</WebDocsDir>
    <CHMDocsDir>$(TargetDir)\docs</CHMDocsDir>
    <SandcastleTempDir>$(BuildTempDir)\docs</SandcastleTempDir>

    <SandcastleProjectPath>docs\Docs.shfbproj</SandcastleProjectPath>
    <SandcastlePatchedProjectPath>docs\Docs.patched.shfbproj</SandcastlePatchedProjectPath>

    <SandcastleOutputPath>$(SandcastleTempDir)\output</SandcastleOutputPath>
    <SandcastleIntellisensePath>$(SandcastleTempDir)\intellisense</SandcastleIntellisensePath>
  </PropertyGroup>

  <Target Name="BuildDocs"
          DependsOnTargets="BuildDocs_Sandcastle;BuildDocs_NoSandcastle" />

  <Target Name="BuildDocs_Sandcastle"
          Condition="'$(NoSandcastle)'!='true'">
    <Message Text="Building Docs..."
             Importance="High" />

    <Error Text="Sandcastle and Sandcastle Help File Builder must be installed to generate documentation.  To only generate Xml Intellisense docs without Sandcastle, build with 'BuildNoSandcastle.bat'.  Be sure to also install the Sandcastle Styles patches.  Look in tools\Setup Files for the Sandcastle installers and patches."
           Condition="! Exists('$(SandcastlePath)') or ! Exists('$(SandcastleHelpFileBuilderPath)')" />

    <Error Text="Microsoft HTML Help Workshop must be installed so that Compiled HTML help (CHM) documentation can be generated.  Look in tools\Setup Files for the Microsoft HTML Help Workshop installer."
           Condition="! Exists('$(HTMLHelpCompilerPath)')" />

    <CreateProperty Value="@(DocumentedAssembly->'&lt;DocumentationSource sourceFile=&quot;%(FullPath)&quot; /&gt;&lt;DocumentationSource sourceFile=&quot;%(RootDir)%(Directory)%(Filename).xml&quot; /&gt;', '')">
		<Output TaskParameter="Value" PropertyName="SandcastleDocumentationSources" />
    </CreateProperty>

    <Delete Files="$(CHMDocsDir)\MbUnit.chm"
            Condition="Exists('$(CHMDocsDir)\MbUnit.chm')" />
    <RemoveDir Directories="$(WebDocsDir);$(SandcastleTempDir)" />
    
    <MakeDir Directories="$(WebDocsParentDir);$(CHMDocsDir);$(SandcastleTempDir)" />

    <!-- Should be able to just override DocumentationSources but
         we get an error.

         SHFB : warning BHT0001: Unable to get executing project: Unable to obtain internal reference.  The specified project will be loaded but command line property overrides will be ignored. [C:\Source\MbUnit\v3\docs\Docs.shfbproj]

         So instead we generate a patched project file with the changes inline. -->

    <Copy SourceFiles="$(SandcastleProjectPath)"
          DestinationFiles="$(SandcastlePatchedProjectPath)" />

    <FileUpdate Files="$(SandcastlePatchedProjectPath)"
                SingleLine="true"
		Regex="&lt;DocumentationSources&gt;.*&lt;/DocumentationSources&gt;"
		ReplacementText="&lt;DocumentationSources&gt;$(SandcastleDocumentationSources)&lt;/DocumentationSources&gt;" />

    <MSBuild Projects="$(SandcastlePatchedProjectPath)"
             Properties="Version=$(Version);BuildDir=$(BuildDir);TempDir=$(BuildTempDir);ReportDir=$(BuildReportsDir);CustomBeforeSHFBTargets=$(SandcastleProjectOverridesPath)" />

    <Copy SourceFiles="$(SandcastleOutputPath)\MbUnit.chm"
          DestinationFolder="$(CHMDocsDir)" />

    <!-- Note: We leave the CHM file in the docs folder for downloads from web. -->
    <Exec Command="move /y &quot;$(SandcastleOutputPath)&quot; &quot;$(WebDocsDir)&quot;" />

    <Delete Files="@(DocumentedAssembly->'$(TargetDir)\bin\%(Folder)\%(Filename).xml')" />
    <Move SourceFiles="@(DocumentedAssembly->'$(SandcastleIntellisensePath)\%(Filename).xml')"
          DestinationFiles="@(DocumentedAssembly->'$(TargetDir)\bin\%(Folder)\%(Filename).xml')" />
  </Target>

  <Target Name="BuildDocs_NoSandcastle"
          Condition="'$(NoSandcastle)'=='true'">
    <Copy SourceFiles="@(DocumentedAssembly->'%(RootDir)%(Directory)%(Filename).xml')"
          DestinationFolder="$(TargetDir)\bin\%(DocumentedAssembly.Folder)" />
  </Target>

  <Target Name="BuildZip"
          DependsOnTargets="CreateBuildDir">
    <CreateItem Include="$(TargetDir)\**\*.*">
      <Output TaskParameter="Include" ItemName="ZipFiles" />
    </CreateItem>

    <Zip Files="@(ZipFiles)"
         WorkingDirectory="$(TargetDir)"
         ZipFileName="$(BuildReleaseDir)\MbUnit-$(Version).zip"
         ZipLevel="9" />
  </Target>

  <Target Name="BuildSourceServerIndex"
          DependsOnTargets="CreateBuildDir">
    <Warning Text="The Debugging Tools for Windows must be installed along with the Source Source SDK in order to embed Source Server indexing information in the PDBs."
             Condition="! Exists('$(SourceServerIndexerPath)')" />

    <Exec Command="&quot;$(SourceServerIndexerPath)&quot; -System=svn -Ini=&quot;$(SourceDir)\srcsrv.ini&quot; -Source=&quot;$(SourceDir)&quot; -Symbols=&quot;$(TargetBinDir)&quot;"
          Condition="Exists('$(SourceServerIndexerPath)')" />
  </Target>

  <Target Name="CreateBuildDir">
    <MakeDir Directories="$(BuildDir);$(TargetDir);$(TargetBinDir);$(TargetDocsDir);$(TargetExtrasDir);$(BuildReportsDir);$(BuildReleaseDir);$(BuildTempDir)" />
  </Target>
</Project>
