<Project DefaultTargets="Clean;Build;Test" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Configure the modules. -->
  <PropertyGroup>
    <RootDir>$(MSBuildProjectDirectory)</RootDir>
  </PropertyGroup>
  <ItemGroup>
    <NestedModule Include="Build.module" />
  </ItemGroup>

  <Import Project="$(RootDir)\Module.targets" />

  <!-- Configure other properties. -->
  <PropertyGroup>
    <Version Condition="'$(Version)'==''">0.0.0.0</Version>
    
    <ShowReports Condition="'$(ShowReports)'==''">true</ShowReports>
    <ReportTypes Condition="'$(ReportTypes)'==''">Html</ReportTypes>

    <TargetFX1_1 Condition="'$(TargetFX1_1)'==''">true</TargetFX1_1>

    <HTMLHelpCompilerPath>$(ProgramFiles)\HTML Help Workshop\hhc.exe</HTMLHelpCompilerPath>
    <NSISPath>$(ProgramFiles)\NSIS\makensis.exe</NSISPath>
    <SourceServerIndexerPath>$(ProgramFiles)\Debugging Tools for Windows\sdk\srcsrv\ssindex.cmd</SourceServerIndexerPath>

    <CSharpProperties>
      Configuration=Release;
      Version=$(Version);
      TargetFX1_1=$(TargetFX1_1);
      BaseFX1_1OutputPath=bin\;
      OutputPath=bin\;
      BaseIntermediateOutputPath=obj\;
      CustomAfterMicrosoftCommonTargets=$(RootDir)\Build.Custom.Targets
    </CSharpProperties>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOnTargets>
      RecursiveBeforeBuild;
      BuildCSharpProjects;
      RecursiveAfterBuild;
      CopyFiles
    </BuildDependsOnTargets>
    <RebuildDependsOnTargets>
      RecursiveBeforeBuild;
      RebuildCSharpProjects;
      RecursiveAfterBuild;
      CopyFiles
    </RebuildDependsOnTargets>
    <CleanDependsOnTargets>
      CleanCSharpProjects;
      RemoveBuildDir;
    </CleanDependsOnTargets>
  </PropertyGroup>

  <Target Name="Release"
          DependsOnTargets="Clean;Build;Test;BuildSourceServerIndex;BuildDocs;BuildInstaller;BuildZip" />

  <Target Name="Build"
          DependsOnTargets="$(BuildDependsOnTargets)" />

  <Target Name="Rebuild"
          DependsOnTargets="$(RebuildDependsOnTargets)" />

  <Target Name="Clean"
          DependsOnTargets="$(CleanDependsOnTargets)">
  </Target>

  <Target Name="RemoveBuildDir">
    <RemoveDir Directories="$(BuildDir)"
               Condition="Exists('$(BuildDir)')" />
  </Target>

  <PropertyGroup>
    <MbUnitConsArgs>/report-type:$(ReportTypes) /report-name-format:test-report /report-folder:&quot;$(BuildReportsDir)&quot; @(TestAssembly->'&quot;%(Identity)&quot;', ' ')</MbUnitConsArgs>
    <MbUnitConsArgs Condition="$(ShowReports)">$(MbUnitConsArgs) /show-reports</MbUnitConsArgs>
  </PropertyGroup>
  <Target Name="Test">
    <Exec Command="&quot;$(TargetDir)\bin\MbUnit.cons.exe&quot; $(MbUnitConsArgs)"
          WorkingDirectory="$(BuildTempDir)"
          IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="MbUnitExitCode" />
    </Exec>

    <Warning Text="Some tests failed!"
             Condition="'$(MbUnitExitCode)'!='0'" />
  </Target>

  <Target Name="BuildCSharpProjects">
    <MSBuild Projects="@(CSharpProject)"
             Targets="Build"
             Properties="$(CSharpProperties)" />
  </Target>

  <Target Name="RebuildCSharpProjects">
    <MSBuild Projects="@(CSharpProject)"
             Targets="Rebuild"
             Properties="$(CSharpProperties)" />
  </Target>

  <Target Name="CleanCSharpProjects">
    <MSBuild Projects="@(CSharpProject)"
             Targets="Clean"
             Properties="$(CSharpProperties)" />
  </Target>

  <Target Name="CopyFiles"
          DependsOnTargets="CreateBuildDir">
    <Message Text="Copying files to target folder..." Importance="High" />

    <Copy SourceFiles="@(Binary)"
          DestinationFolder="$(TargetBinDir)\%(Binary.Folder)\%(RecursiveDir)" />
    <Copy SourceFiles="@(Document)"
          DestinationFolder="$(TargetDocsDir)\%(Document.Folder)\%(RecursiveDir)" />
    <Copy SourceFiles="@(Extra)"
          DestinationFolder="$(TargetExtrasDir)\%(Extra.Folder)\%(RecursiveDir)" />
    <Copy SourceFiles="@(File)"
          DestinationFolder="$(TargetDir)\%(File.Folder)\%(RecursiveDir)" />
  </Target>

  <Target Name="BuildInstaller"
          DependsOnTargets="CreateBuildDir">
    <Warning Text="The NSIS tools must be installed to generate the installer.  Look in libs\Setup Files for the NSIS installer."
             Condition="! Exists('$(NSISPath)')" />

    <Exec Command="&quot;$(NSISPath)&quot; /V2 /NOCONFIG /DVERSION=$(Version) /DROOTDIR=&quot;$(RootDir)&quot; &quot;$(SourceDir)\installer\MbUnit.nsi&quot;"
          Condition="Exists('$(NSISPath)')" />
  </Target>

  <Target Name="BuildDocs"
          DependsOnTargets="BuildXMLDocs;BuildCHMDocs" />

  <PropertyGroup>
    <CopyrightText>Copyright 2005-2008 MbUnit Project - http://www.mbunit.com/</CopyrightText>
    <CopyrightHref>http://www.mbunit.com/</CopyrightHref>

    <NDocCommonOptions>@(DocumentedAssembly->'"%(FullPath)"', ' ')</NDocCommonOptions>

    <NDocXMLOptions>$(NDocCommonOptions) -documenter=Intellisense "-OutputDirectory=$(TargetBinDir)" -UseAssemblyShadowCache=False</NDocXMLOptions>

    <NDocCHMOptions>$(NDocCommonOptions) -documenter=MSDN-CHM "-OutputDirectory=$(TargetDocsDir)" -HtmlHelpName=MbUnit "-Title=MbUnit API Documentation" -UseAssemblyShadowCache=False -AssemblyVersionInfo=AssemblyVersion "-CopyrightText=$(CopyrightText)" "-CopyrightHref=$(CopyrightHref)" -IncludeDefaultThreadSafety=False -CleanIntermediates=True</NDocCHMOptions>
  </PropertyGroup>

  <!-- Produce clean Intellisense docs with "inheritdoc" accounted for. -->
  <Target Name="BuildXMLDocs">
    <Exec Command="&quot;$(LibsDir)\NDoc2\NDocConsole.exe&quot; $(NDocXMLOptions)" />
    <Delete Files="$(TargetBinDir)\ndoc_qa.log;$(TargetBinDir)\ndoc_build.log" />
  </Target>

  <Target Name="BuildCHMDocs">
    <Warning Text="Microsoft HTML Help Workshop must be installed so that Compiled HTML help (CHM) documentation can be generated.  Look in libs\Setup Files for the Microsoft HTML Help Workshop installer."
             Condition="! Exists('$(HTMLHelpCompilerPath)')" />

    <Exec Command="&quot;$(LibsDir)\NDoc2\NDocConsole.exe&quot; $(NDocCHMOptions)"
          Condition="Exists('$(HTMLHelpCompilerPath)')" />
    <RemoveDir Directories="$(TargetDocsDir)\ndoc_msdn_temp" />
  </Target>

  <Target Name="BuildZip"
          DependsOnTargets="CreateBuildDir">
    <CreateItem Include="$(TargetDir)\**\*.*">
      <Output TaskParameter="Include" ItemName="ZipFiles" />
    </CreateItem>

    <Zip Files="@(ZipFiles)"
         WorkingDirectory="$(TargetDir)"
         ZipFileName="$(BuildReleaseDir)\MbUnit-$(Version).zip"
         ZipLevel="9" />
  </Target>

  <Target Name="BuildSourceServerIndex"
          DependsOnTargets="CreateBuildDir">
    <Warning Text="The Debugging Tools for Windows must be installed along with the Source Source SDK in order to embed Source Server indexing information in the PDBs."
             Condition="! Exists('$(SourceServerIndexerPath)')" />

    <Exec Command="&quot;$(SourceServerIndexerPath)&quot; -System=svn -Ini=&quot;$(SourceDir)\srcsrv.ini&quot; -Source=&quot;$(SourceDir)&quot; -Symbols=&quot;$(TargetBinDir)&quot;"
          Condition="Exists('$(SourceServerIndexerPath)')" />
  </Target>

  <Target Name="CreateBuildDir">
    <MakeDir Directories="$(BuildDir);$(TargetDir);$(TargetBinDir);$(TargetDocsDir);$(TargetExtrasDir);$(BuildReportsDir);$(BuildReleaseDir);$(BuildTempDir)" />
  </Target>
</Project>
