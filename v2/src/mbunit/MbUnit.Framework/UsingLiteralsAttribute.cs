using System;
using System.Reflection;
using System.Collections;
using TestFu.Operations;
using MbUnit.Core;

namespace MbUnit.Framework
{
    /// <summary>
    /// Tags a parameter within a [CombinatorialTest]-tagged method to indicate that it should
    /// use string literals from the semi-colon delimited list provided
    /// </summary>
    /// <example>
    /// <para>In the following example, TestStrings is run three times against each of the strings in the list</para>
    /// <code>
    ///     [TestFixture]
    ///     public class UsingLiterals {
    /// 
    ///         [CombinatorialTest]
    ///         public void TestEnumValues([UsingLiterals("A;B;C")] string item) 
    ///         {
    ///             StringAssert.AreEqualIgnoreCase("a", item);
    ///         }
    ///     }
    /// </code>
    /// </example>
    /// <seealso cref="CombinatorialTestAttribute"/>
    /// <seealso cref="UsingBaseAttribute"/>
    /// <seealso cref="UsingFactoriesAttribute"/>
    /// <seealso cref="UsingImplementationsAttribute"/>
    /// <seealso cref="UsingLinearAttribute"/>
    /// <seealso cref="UsingEnumAttribute"/>
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = true, Inherited = true)]
    public sealed class UsingLiteralsAttribute : UsingBaseAttribute
    {
        private string values;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsingLiteralsAttribute"/> class.
        /// </summary>
        /// <param name="values">The semi-colon delimited list of strings to use for the parameter</param>
        public UsingLiteralsAttribute(string values)
        {
            this.values = values;
        }

        /// <summary>
        /// The semi-colon delimited list of strings to use for the parameter
        /// </summary>
        /// <value>The semi-colon delimited list of strings to use for the parameter</value>
        public string Values
        {
            get
            {
                return this.values;
            }
        }

        /// <summary>
        /// Gets the set of values (the collection of domains) for the parameter.
        /// </summary>
        /// <param name="domains">The <see cref="IDomainCollection"/> the values generated by the source of data</param>
        /// <param name="parameter"><see cref="ParameterInfo"/> for the parameter that wants the values.</param>
        /// <param name="fixture">The test fixture.</param>
        /// <remarks>See <a href="http://blog.dotnetwiki.org/CombinatorialTestingWithTestFu1.aspx">here</a> for more on
        /// domain generation</remarks>
        public override void GetDomains(IDomainCollection domains, ParameterInfo parameter, object fixture)
        {
            bool isString = parameter.ParameterType.IsAssignableFrom(typeof(string));
            ArrayList data = new ArrayList();
            foreach (string memberName in this.Values.Split(';'))
            {
                object cresult = null;
                if (isString)
                    cresult = memberName.ToString();
                else
                    cresult = Convert.ChangeType(memberName, parameter.ParameterType);
                data.Add(cresult);
            }
            if (data.Count == 0)
                return;

            CollectionDomain domain = new CollectionDomain(data);
            domains.Add(domain);
        }
    }
}
