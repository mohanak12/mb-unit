using System;
using TestFu.Operations;
using System.Reflection;
using MbUnit.Core;

namespace MbUnit.Framework
{
    /// <summary>
    /// Base class for the [Using*] attributes that tag parameters in camobinatorial test methods
    /// </summary>
    /// <seealso cref="CombinatorialTestAttribute"/>
    /// <seealso cref="UsingEnumAttribute"/>
    /// <seealso cref="UsingFactoriesAttribute"/>
    /// <seealso cref="UsingImplementationsAttribute"/>
    /// <seealso cref="UsingLinearAttribute"/>
    /// <seealso cref="UsingLiteralsAttribute"/>
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = true, Inherited = true)]
    public abstract class UsingBaseAttribute : Attribute
    {
        /// <summary>
        /// Gets the set of values (the collection of domains) for the parameter.
        /// </summary>
        /// <remarks>See <a href="http://blog.dotnetwiki.org/CombinatorialTestingWithTestFu1.aspx">here</a> for more on
        /// domain generation</remarks>
        /// <param name="domains">The <see cref="IDomainCollection"/> the values generated by the source of data</param>
        /// <param name="parameter"><see cref="ParameterInfo"/> for the parameter that wants the values.</param>
        /// <param name="fixture">The test fixture.</param>
        public abstract void GetDomains(IDomainCollection domains, ParameterInfo parameter,
            object fixture);

        /// <summary>
        /// Invokes the method.
        /// </summary>
        /// <param name="t">The <see cref="Type"/> containing the <paramref name="method"/> to invoke.</param>
        /// <param name="method">The method to invoke.</param>
        /// <returns>The return value of the method</returns>
        protected Object InvokeMethod(Type t, MethodInfo method)
        {
            Object fixture = null;
            try
            {
                fixture = TypeHelper.CreateInstance(t);
                return method.Invoke(fixture, null);
            }
            finally
            {
                IDisposable disposable = fixture as IDisposable;
                if (disposable != null)
                    disposable.Dispose();
            }
        }
    }
}
