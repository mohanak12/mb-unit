using System;
using System.Reflection;
using System.Collections;
using TestFu.Operations;
using MbUnit.Core;

namespace MbUnit.Framework {
    /// <summary>
    /// Tags a parameter within a [CombinatorialTest]-tagged method to indicate that it should
    /// use integer values from within a specified range
    /// </summary>
    /// <remarks>
    /// <para>The range of integers is specified using a seed value, amount by which the value of the integer 
    /// increases each time a new value is required (default is 1) and the total number of integers to generate</para>
    /// </remarks>
    /// <example>
    /// <para>In the following example, the two test methods will be run against a sequence of ten integers starting with
    /// zero and with step values of one and two respectively.</para>
    /// <code>
    ///     [TestFixture]
    ///     public class UsingLinear 
    ///     {
    ///         [CombinatorialTest]
    ///         public void TestRangeOfIntegers(
    ///             [UsingLinear(0, 10)] int number) 
    ///         {
    ///             Assert.GreaterThan(number, 5); // integers between 0 and 9
    ///         }
    /// 
    ///         [CombinatorialTest]
    ///         public void TestRangeOfIntegersWithStep(
    ///             [UsingLinear(0, 10, 2)] int number) 
    ///         {
    ///             Assert.GreaterThan(number, 5); // integers between 0 and 18
    ///         }
    ///     }
    /// </code>
    /// </example>
    /// <seealso cref="CombinatorialTestAttribute"/>
    /// <seealso cref="UsingEnumAttribute"/>
    /// <seealso cref="UsingFactoriesAttribute"/>
    /// <seealso cref="UsingImplementationsAttribute"/>
    /// <seealso cref="UsingBaseAttribute"/>
    /// <seealso cref="UsingLiteralsAttribute"/>
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = true, Inherited = true)]
    public sealed class UsingLinearAttribute : UsingBaseAttribute {
        private IDomain domain;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsingLinearAttribute"/> class.
        /// </summary>
        /// <param name="start">The seed value for the sequence of integers.</param>
        /// <param name="stepCount">The number of integers in the sequence</param>
        public UsingLinearAttribute(int start, int stepCount) {
            this.domain = new LinearInt32Domain(start, stepCount);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsingLinearAttribute"/> class.
        /// </summary>
        /// <param name="start">The seed value for the sequence of integers.</param>
        /// <param name="stepCount">The number of integers in the sequence</param>
        /// <param name="step">The amount by which each integer in the sequence increaases</param>
        public UsingLinearAttribute(int start, int stepCount, int step) {
            this.domain = new LinearInt32Domain(start, stepCount, step);
        }

        /// <summary>
        /// Gets the set of values (the collection of domains) for the parameter.
        /// </summary>
        /// <param name="domains">The <see cref="IDomainCollection"/> the values generated by the source of data</param>
        /// <param name="parameter"><see cref="ParameterInfo"/> for the parameter that wants the values.</param>
        /// <param name="fixture">The test fixture.</param>
        /// <remarks>See <a href="http://blog.dotnetwiki.org/CombinatorialTestingWithTestFu1.aspx">here</a> for more on
        /// domain generation</remarks>
        public override void GetDomains(IDomainCollection domains, ParameterInfo parameter, object fixture) {
            domains.Add(domain);
        }
    }
}
