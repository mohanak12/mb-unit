#pragma warning disable 1591
#pragma warning disable 1587
#pragma warning disable 3001
#pragma warning disable 3008

 using System;
 using System.Collections;
 using System.Collections.Generic;
 using System.Text;
 using System.IO;
 using Thrift;
 using Thrift.Collections;
 using Thrift.Protocol;
 using Thrift.Transport;
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class GetIPRequest : TBase
  {
    private string vm;

    public string Vm
    {
      get
      {
        return vm;
      }
      set
      {
        __isset.vm = true;
        this.vm = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool vm;
    }

    public GetIPRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.vm = iprot.ReadString();
              this.__isset.vm = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetIPRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.vm != null && __isset.vm) {
        field.Name = "vm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.vm);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetIPRequest(");
      sb.Append("vm: ");
      sb.Append(this.vm);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class GetIPResponse : TBase
  {
    private string ip;

    public string Ip
    {
      get
      {
        return ip;
      }
      set
      {
        __isset.ip = true;
        this.ip = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool ip;
    }

    public GetIPResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.ip = iprot.ReadString();
              this.__isset.ip = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetIPResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.ip != null && __isset.ip) {
        field.Name = "ip";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.ip);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetIPResponse(");
      sb.Append("ip: ");
      sb.Append(this.ip);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class GetStatusRequest : TBase
  {
    private string vm;

    public string Vm
    {
      get
      {
        return vm;
      }
      set
      {
        __isset.vm = true;
        this.vm = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool vm;
    }

    public GetStatusRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.vm = iprot.ReadString();
              this.__isset.vm = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetStatusRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.vm != null && __isset.vm) {
        field.Name = "vm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.vm);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetStatusRequest(");
      sb.Append("vm: ");
      sb.Append(this.vm);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class GetStatusResponse : TBase
  {
    private Status status;

    public Status Status
    {
      get
      {
        return status;
      }
      set
      {
        __isset.status = true;
        this.status = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool status;
    }

    public GetStatusResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              this.status = (Status)iprot.ReadI32();
              this.__isset.status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetStatusResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)this.status);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GetStatusResponse(");
      sb.Append("status: ");
      sb.Append(this.status);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class OperationFailedException : Exception, TBase
  {
    private string why;
    private string details;

    public string Why
    {
      get
      {
        return why;
      }
      set
      {
        __isset.why = true;
        this.why = value;
      }
    }

    public string Details
    {
      get
      {
        return details;
      }
      set
      {
        __isset.details = true;
        this.details = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool why;
      public bool details;
    }

    public OperationFailedException() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.why = iprot.ReadString();
              this.__isset.why = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.details = iprot.ReadString();
              this.__isset.details = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("OperationFailedException");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.why != null && __isset.why) {
        field.Name = "why";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.why);
        oprot.WriteFieldEnd();
      }
      if (this.details != null && __isset.details) {
        field.Name = "details";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.details);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("OperationFailedException(");
      sb.Append("why: ");
      sb.Append(this.why);
      sb.Append(",details: ");
      sb.Append(this.details);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class PauseRequest : TBase
  {
    private string vm;

    public string Vm
    {
      get
      {
        return vm;
      }
      set
      {
        __isset.vm = true;
        this.vm = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool vm;
    }

    public PauseRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.vm = iprot.ReadString();
              this.__isset.vm = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PauseRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.vm != null && __isset.vm) {
        field.Name = "vm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.vm);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PauseRequest(");
      sb.Append("vm: ");
      sb.Append(this.vm);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class PauseResponse : TBase
  {

    public PauseResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PauseResponse");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PauseResponse(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class PowerOffRequest : TBase
  {
    private string vm;

    public string Vm
    {
      get
      {
        return vm;
      }
      set
      {
        __isset.vm = true;
        this.vm = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool vm;
    }

    public PowerOffRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.vm = iprot.ReadString();
              this.__isset.vm = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PowerOffRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.vm != null && __isset.vm) {
        field.Name = "vm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.vm);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PowerOffRequest(");
      sb.Append("vm: ");
      sb.Append(this.vm);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class PowerOffResponse : TBase
  {

    public PowerOffResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PowerOffResponse");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PowerOffResponse(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class ResumeRequest : TBase
  {
    private string vm;

    public string Vm
    {
      get
      {
        return vm;
      }
      set
      {
        __isset.vm = true;
        this.vm = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool vm;
    }

    public ResumeRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.vm = iprot.ReadString();
              this.__isset.vm = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResumeRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.vm != null && __isset.vm) {
        field.Name = "vm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.vm);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ResumeRequest(");
      sb.Append("vm: ");
      sb.Append(this.vm);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class ResumeResponse : TBase
  {

    public ResumeResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResumeResponse");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ResumeResponse(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class ShutdownRequest : TBase
  {
    private string vm;

    public string Vm
    {
      get
      {
        return vm;
      }
      set
      {
        __isset.vm = true;
        this.vm = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool vm;
    }

    public ShutdownRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.vm = iprot.ReadString();
              this.__isset.vm = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ShutdownRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.vm != null && __isset.vm) {
        field.Name = "vm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.vm);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ShutdownRequest(");
      sb.Append("vm: ");
      sb.Append(this.vm);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class ShutdownResponse : TBase
  {

    public ShutdownResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ShutdownResponse");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ShutdownResponse(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class StartRequest : TBase
  {
    private string vm;
    private string snapshot;

    public string Vm
    {
      get
      {
        return vm;
      }
      set
      {
        __isset.vm = true;
        this.vm = value;
      }
    }

    public string Snapshot
    {
      get
      {
        return snapshot;
      }
      set
      {
        __isset.snapshot = true;
        this.snapshot = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool vm;
      public bool snapshot;
    }

    public StartRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.vm = iprot.ReadString();
              this.__isset.vm = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.snapshot = iprot.ReadString();
              this.__isset.snapshot = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StartRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.vm != null && __isset.vm) {
        field.Name = "vm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.vm);
        oprot.WriteFieldEnd();
      }
      if (this.snapshot != null && __isset.snapshot) {
        field.Name = "snapshot";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.snapshot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StartRequest(");
      sb.Append("vm: ");
      sb.Append(this.vm);
      sb.Append(",snapshot: ");
      sb.Append(this.snapshot);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class StartResponse : TBase
  {

    public StartResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StartResponse");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StartResponse(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

namespace VMTool.Thrift
{
  public enum Status
  {
    UNKNOWN = 0,
    OFF = 1,
    RUNNING = 2,
    PAUSED = 3,
  }
}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class TakeSnapshotRequest : TBase
  {
    private string vm;
    private string snapshotName;

    public string Vm
    {
      get
      {
        return vm;
      }
      set
      {
        __isset.vm = true;
        this.vm = value;
      }
    }

    public string SnapshotName
    {
      get
      {
        return snapshotName;
      }
      set
      {
        __isset.snapshotName = true;
        this.snapshotName = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool vm;
      public bool snapshotName;
    }

    public TakeSnapshotRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.vm = iprot.ReadString();
              this.__isset.vm = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.snapshotName = iprot.ReadString();
              this.__isset.snapshotName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TakeSnapshotRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.vm != null && __isset.vm) {
        field.Name = "vm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.vm);
        oprot.WriteFieldEnd();
      }
      if (this.snapshotName != null && __isset.snapshotName) {
        field.Name = "snapshotName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.snapshotName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TakeSnapshotRequest(");
      sb.Append("vm: ");
      sb.Append(this.vm);
      sb.Append(",snapshotName: ");
      sb.Append(this.snapshotName);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{

  [Serializable]
  public partial class TakeSnapshotResponse : TBase
  {

    public TakeSnapshotResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TakeSnapshotResponse");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TakeSnapshotResponse(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
namespace VMTool.Thrift
{
  public class VMToolService {
    public interface Iface {
      StartResponse Start(StartRequest request);
      PowerOffResponse PowerOff(PowerOffRequest request);
      ShutdownResponse Shutdown(ShutdownRequest request);
      PauseResponse Pause(PauseRequest request);
      ResumeResponse Resume(ResumeRequest request);
      TakeSnapshotResponse TakeSnapshot(TakeSnapshotRequest request);
      GetStatusResponse GetStatus(GetStatusRequest request);
      GetIPResponse GetIP(GetIPRequest request);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public StartResponse Start(StartRequest request)
      {
        send_Start(request);
        return recv_Start();
      }

      public void send_Start(StartRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("Start", TMessageType.Call, seqid_));
        Start_args args = new Start_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public StartResponse recv_Start()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Start_result result = new Start_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Start failed: unknown result");
      }

      public PowerOffResponse PowerOff(PowerOffRequest request)
      {
        send_PowerOff(request);
        return recv_PowerOff();
      }

      public void send_PowerOff(PowerOffRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("PowerOff", TMessageType.Call, seqid_));
        PowerOff_args args = new PowerOff_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public PowerOffResponse recv_PowerOff()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PowerOff_result result = new PowerOff_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PowerOff failed: unknown result");
      }

      public ShutdownResponse Shutdown(ShutdownRequest request)
      {
        send_Shutdown(request);
        return recv_Shutdown();
      }

      public void send_Shutdown(ShutdownRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("Shutdown", TMessageType.Call, seqid_));
        Shutdown_args args = new Shutdown_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ShutdownResponse recv_Shutdown()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Shutdown_result result = new Shutdown_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Shutdown failed: unknown result");
      }

      public PauseResponse Pause(PauseRequest request)
      {
        send_Pause(request);
        return recv_Pause();
      }

      public void send_Pause(PauseRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("Pause", TMessageType.Call, seqid_));
        Pause_args args = new Pause_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public PauseResponse recv_Pause()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Pause_result result = new Pause_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Pause failed: unknown result");
      }

      public ResumeResponse Resume(ResumeRequest request)
      {
        send_Resume(request);
        return recv_Resume();
      }

      public void send_Resume(ResumeRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("Resume", TMessageType.Call, seqid_));
        Resume_args args = new Resume_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ResumeResponse recv_Resume()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Resume_result result = new Resume_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Resume failed: unknown result");
      }

      public TakeSnapshotResponse TakeSnapshot(TakeSnapshotRequest request)
      {
        send_TakeSnapshot(request);
        return recv_TakeSnapshot();
      }

      public void send_TakeSnapshot(TakeSnapshotRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("TakeSnapshot", TMessageType.Call, seqid_));
        TakeSnapshot_args args = new TakeSnapshot_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TakeSnapshotResponse recv_TakeSnapshot()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TakeSnapshot_result result = new TakeSnapshot_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TakeSnapshot failed: unknown result");
      }

      public GetStatusResponse GetStatus(GetStatusRequest request)
      {
        send_GetStatus(request);
        return recv_GetStatus();
      }

      public void send_GetStatus(GetStatusRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("GetStatus", TMessageType.Call, seqid_));
        GetStatus_args args = new GetStatus_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetStatusResponse recv_GetStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetStatus_result result = new GetStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStatus failed: unknown result");
      }

      public GetIPResponse GetIP(GetIPRequest request)
      {
        send_GetIP(request);
        return recv_GetIP();
      }

      public void send_GetIP(GetIPRequest request)
      {
        oprot_.WriteMessageBegin(new TMessage("GetIP", TMessageType.Call, seqid_));
        GetIP_args args = new GetIP_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public GetIPResponse recv_GetIP()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetIP_result result = new GetIP_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetIP failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Start"] = Start_Process;
        processMap_["PowerOff"] = PowerOff_Process;
        processMap_["Shutdown"] = Shutdown_Process;
        processMap_["Pause"] = Pause_Process;
        processMap_["Resume"] = Resume_Process;
        processMap_["TakeSnapshot"] = TakeSnapshot_Process;
        processMap_["GetStatus"] = GetStatus_Process;
        processMap_["GetIP"] = GetIP_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Start_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Start_args args = new Start_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Start_result result = new Start_result();
        try {
          result.Success = iface_.Start(args.Request);
        } catch (OperationFailedException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("Start", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PowerOff_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PowerOff_args args = new PowerOff_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PowerOff_result result = new PowerOff_result();
        try {
          result.Success = iface_.PowerOff(args.Request);
        } catch (OperationFailedException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("PowerOff", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Shutdown_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Shutdown_args args = new Shutdown_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Shutdown_result result = new Shutdown_result();
        try {
          result.Success = iface_.Shutdown(args.Request);
        } catch (OperationFailedException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("Shutdown", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Pause_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Pause_args args = new Pause_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Pause_result result = new Pause_result();
        try {
          result.Success = iface_.Pause(args.Request);
        } catch (OperationFailedException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("Pause", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Resume_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Resume_args args = new Resume_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Resume_result result = new Resume_result();
        try {
          result.Success = iface_.Resume(args.Request);
        } catch (OperationFailedException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("Resume", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TakeSnapshot_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TakeSnapshot_args args = new TakeSnapshot_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TakeSnapshot_result result = new TakeSnapshot_result();
        try {
          result.Success = iface_.TakeSnapshot(args.Request);
        } catch (OperationFailedException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("TakeSnapshot", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetStatus_args args = new GetStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetStatus_result result = new GetStatus_result();
        try {
          result.Success = iface_.GetStatus(args.Request);
        } catch (OperationFailedException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("GetStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetIP_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetIP_args args = new GetIP_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetIP_result result = new GetIP_result();
        try {
          result.Success = iface_.GetIP(args.Request);
        } catch (OperationFailedException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("GetIP", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class Start_args : TBase
    {
      private StartRequest request;

      public StartRequest Request
      {
        get
        {
          return request;
        }
        set
        {
          __isset.request = true;
          this.request = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool request;
      }

      public Start_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.request = new StartRequest();
                this.request.Read(iprot);
                this.__isset.request = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Start_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Start_args(");
        sb.Append("request: ");
        sb.Append(this.request== null ? "<null>" : this.request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Start_result : TBase
    {
      private StartResponse success;
      private OperationFailedException ex;

      public StartResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public OperationFailedException Ex
      {
        get
        {
          return ex;
        }
        set
        {
          __isset.ex = true;
          this.ex = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public Start_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new StartResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ex = new OperationFailedException();
                this.ex.Read(iprot);
                this.__isset.ex = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Start_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (this.ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Start_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ex: ");
        sb.Append(this.ex== null ? "<null>" : this.ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class PowerOff_args : TBase
    {
      private PowerOffRequest request;

      public PowerOffRequest Request
      {
        get
        {
          return request;
        }
        set
        {
          __isset.request = true;
          this.request = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool request;
      }

      public PowerOff_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.request = new PowerOffRequest();
                this.request.Read(iprot);
                this.__isset.request = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PowerOff_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PowerOff_args(");
        sb.Append("request: ");
        sb.Append(this.request== null ? "<null>" : this.request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class PowerOff_result : TBase
    {
      private PowerOffResponse success;
      private OperationFailedException ex;

      public PowerOffResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public OperationFailedException Ex
      {
        get
        {
          return ex;
        }
        set
        {
          __isset.ex = true;
          this.ex = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public PowerOff_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new PowerOffResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ex = new OperationFailedException();
                this.ex.Read(iprot);
                this.__isset.ex = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PowerOff_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (this.ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PowerOff_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ex: ");
        sb.Append(this.ex== null ? "<null>" : this.ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Shutdown_args : TBase
    {
      private ShutdownRequest request;

      public ShutdownRequest Request
      {
        get
        {
          return request;
        }
        set
        {
          __isset.request = true;
          this.request = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool request;
      }

      public Shutdown_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.request = new ShutdownRequest();
                this.request.Read(iprot);
                this.__isset.request = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Shutdown_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Shutdown_args(");
        sb.Append("request: ");
        sb.Append(this.request== null ? "<null>" : this.request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Shutdown_result : TBase
    {
      private ShutdownResponse success;
      private OperationFailedException ex;

      public ShutdownResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public OperationFailedException Ex
      {
        get
        {
          return ex;
        }
        set
        {
          __isset.ex = true;
          this.ex = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public Shutdown_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ShutdownResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ex = new OperationFailedException();
                this.ex.Read(iprot);
                this.__isset.ex = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Shutdown_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (this.ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Shutdown_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ex: ");
        sb.Append(this.ex== null ? "<null>" : this.ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Pause_args : TBase
    {
      private PauseRequest request;

      public PauseRequest Request
      {
        get
        {
          return request;
        }
        set
        {
          __isset.request = true;
          this.request = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool request;
      }

      public Pause_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.request = new PauseRequest();
                this.request.Read(iprot);
                this.__isset.request = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Pause_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Pause_args(");
        sb.Append("request: ");
        sb.Append(this.request== null ? "<null>" : this.request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Pause_result : TBase
    {
      private PauseResponse success;
      private OperationFailedException ex;

      public PauseResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public OperationFailedException Ex
      {
        get
        {
          return ex;
        }
        set
        {
          __isset.ex = true;
          this.ex = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public Pause_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new PauseResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ex = new OperationFailedException();
                this.ex.Read(iprot);
                this.__isset.ex = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Pause_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (this.ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Pause_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ex: ");
        sb.Append(this.ex== null ? "<null>" : this.ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Resume_args : TBase
    {
      private ResumeRequest request;

      public ResumeRequest Request
      {
        get
        {
          return request;
        }
        set
        {
          __isset.request = true;
          this.request = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool request;
      }

      public Resume_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.request = new ResumeRequest();
                this.request.Read(iprot);
                this.__isset.request = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Resume_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Resume_args(");
        sb.Append("request: ");
        sb.Append(this.request== null ? "<null>" : this.request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class Resume_result : TBase
    {
      private ResumeResponse success;
      private OperationFailedException ex;

      public ResumeResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public OperationFailedException Ex
      {
        get
        {
          return ex;
        }
        set
        {
          __isset.ex = true;
          this.ex = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public Resume_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ResumeResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ex = new OperationFailedException();
                this.ex.Read(iprot);
                this.__isset.ex = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Resume_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (this.ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Resume_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ex: ");
        sb.Append(this.ex== null ? "<null>" : this.ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class TakeSnapshot_args : TBase
    {
      private TakeSnapshotRequest request;

      public TakeSnapshotRequest Request
      {
        get
        {
          return request;
        }
        set
        {
          __isset.request = true;
          this.request = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool request;
      }

      public TakeSnapshot_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.request = new TakeSnapshotRequest();
                this.request.Read(iprot);
                this.__isset.request = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TakeSnapshot_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TakeSnapshot_args(");
        sb.Append("request: ");
        sb.Append(this.request== null ? "<null>" : this.request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class TakeSnapshot_result : TBase
    {
      private TakeSnapshotResponse success;
      private OperationFailedException ex;

      public TakeSnapshotResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public OperationFailedException Ex
      {
        get
        {
          return ex;
        }
        set
        {
          __isset.ex = true;
          this.ex = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public TakeSnapshot_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new TakeSnapshotResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ex = new OperationFailedException();
                this.ex.Read(iprot);
                this.__isset.ex = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("TakeSnapshot_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (this.ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("TakeSnapshot_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ex: ");
        sb.Append(this.ex== null ? "<null>" : this.ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetStatus_args : TBase
    {
      private GetStatusRequest request;

      public GetStatusRequest Request
      {
        get
        {
          return request;
        }
        set
        {
          __isset.request = true;
          this.request = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool request;
      }

      public GetStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.request = new GetStatusRequest();
                this.request.Read(iprot);
                this.__isset.request = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetStatus_args(");
        sb.Append("request: ");
        sb.Append(this.request== null ? "<null>" : this.request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetStatus_result : TBase
    {
      private GetStatusResponse success;
      private OperationFailedException ex;

      public GetStatusResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public OperationFailedException Ex
      {
        get
        {
          return ex;
        }
        set
        {
          __isset.ex = true;
          this.ex = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public GetStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetStatusResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ex = new OperationFailedException();
                this.ex.Read(iprot);
                this.__isset.ex = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (this.ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetStatus_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ex: ");
        sb.Append(this.ex== null ? "<null>" : this.ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetIP_args : TBase
    {
      private GetIPRequest request;

      public GetIPRequest Request
      {
        get
        {
          return request;
        }
        set
        {
          __isset.request = true;
          this.request = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool request;
      }

      public GetIP_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.request = new GetIPRequest();
                this.request.Read(iprot);
                this.__isset.request = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetIP_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          this.request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetIP_args(");
        sb.Append("request: ");
        sb.Append(this.request== null ? "<null>" : this.request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class GetIP_result : TBase
    {
      private GetIPResponse success;
      private OperationFailedException ex;

      public GetIPResponse Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public OperationFailedException Ex
      {
        get
        {
          return ex;
        }
        set
        {
          __isset.ex = true;
          this.ex = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public GetIP_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new GetIPResponse();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ex = new OperationFailedException();
                this.ex.Read(iprot);
                this.__isset.ex = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetIP_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (this.ex != null) {
            field.Name = "ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetIP_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ex: ");
        sb.Append(this.ex== null ? "<null>" : this.ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
