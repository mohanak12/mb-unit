<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
  <Import Project="$(ModuleTargets)" />

  <UsingTask TaskName="ParseVersion"
             AssemblyFile="bin\Gallio.BuildTools.Tasks.dll" />

  <PropertyGroup>
    <Coverage Condition="'$(Coverage)'==''">false</Coverage>

    <ShowReports Condition="'$(ShowReports)'==''">true</ShowReports>
    <ReportTypes Condition="'$(ReportTypes)'==''">Html-Condensed</ReportTypes>
    <IgnoreFailures Condition="'$(IgnoreFailures)'==''">false</IgnoreFailures>

    <IncludeSources Condition="'$(IncludeSources)'==''">false</IncludeSources>
    
    <SandcastlePath>$(ProgramFiles)\Sandcastle</SandcastlePath>
    <SandcastleHelpFileBuilderPath>$(SHFBROOT)</SandcastleHelpFileBuilderPath>
    <HTMLHelpCompilerPath>$(ProgramFiles)\HTML Help Workshop\hhc.exe</HTMLHelpCompilerPath>
    <VSIPSDKHelpPath>$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\VSIP\9.0\@InstallDir)\HelpIntegrationWizard\MSHelp2</VSIPSDKHelpPath>
    <VSIPSDKHelpPath Condition="'$(VSIPSDKHelpPath)'==''">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\VSIP\8.0\@InstallDir)\HelpIntegrationWizard\MSHelp2</VSIPSDKHelpPath>
    <SourceServerIndexerPath>$(ProgramFiles)\Debugging Tools for Windows\sdk\srcsrv\ssindex.cmd</SourceServerIndexerPath>
    <SourceServerIndexerPath Condition="! Exists('$(SourceServerIndexerPath)')">$(ProgramFiles)\Debugging Tools for Windows (x86)\srcsrv\ssindex.cmd</SourceServerIndexerPath>
    <SourceServerIndexerPath Condition="! Exists('$(SourceServerIndexerPath)')">C:\Program Files\Debugging Tools for Windows (x64)\srcsrv\ssindex.cmd</SourceServerIndexerPath>
    <NCoverInstallDir>$(Registry:HKEY_LOCAL_MACHINE\Software\Gnoso\NCover\@InstallDir)</NCoverInstallDir>

    <VersionSuffix></VersionSuffix>
    <VersionSuffix Condition="'$(Runtime)'=='Mono'">-Mono</VersionSuffix>
  </PropertyGroup>

  <!-- ROOT CONTENT -->

  <ItemGroup>
    <Module Include="src\Dist.Bundle.module" />
  </ItemGroup>

  <ItemGroup>
    <LicenseFile Include="Gallio License.txt">
      <ImagePath>licenses</ImagePath>
    </LicenseFile>
    <LicenseFile Include="ASL - Apache Software Foundation License.txt">
      <ImagePath>licenses</ImagePath>
    </LicenseFile>
    
    <File Include="Credits.html" />

    <File Include="$(ToolsDir)\H2Reg\H2Reg.*">
      <ImagePath>extras</ImagePath>
    </File>

    <Feature Include="NO_ILMERGE" Condition="'$(SkipILMerge)'=='true'" />
    <Feature Include="NO_SANDCASTLE" Condition="'$(SkipDocumentation)'=='true'" />
    <Feature Include="DOTNET40" Condition="'$(DotNetFrameworkVersion)'=='4.0'" />
  </ItemGroup>

  <ItemGroup Condition="$(IncludeSources)">
    <File Include="Sources.txt" />
      
    <Feature Include="INCLUDE_SOURCES" />
  </ItemGroup>

  <!-- CLEAN TARGETS -->

  <Target Name="BeforeClean"
          DependsOnTargets="CleanInstaller" />


  <!-- COMPILE TARGETS -->

  <Target Name="BeforeCompile"
          DependsOnTargets="VerifyProjectsSynchronized" />


  <!-- IMAGE TARGETS -->

  <Target Name="AfterImage"
          DependsOnTargets="BuildSourceServerIndex;BuildDocs;BuildSourcesFile" />


  <!-- TEST TARGETS -->

  <Target Name="AfterTest"
          DependsOnTargets="VerifyInstallation;RunTests" />


  <!-- DIST TARGETS -->

  <Target Name="AfterDist"
          DependsOnTargets="BuildInstaller;BuildZip" />


  <!-- SUPPORT CODE: API DOCS -->

  <PropertyGroup>
    <WebDocsParentDir>$(ModuleDistDir)\APIDocs</WebDocsParentDir>
    <WebDocsDir>$(WebDocsParentDir)\$(Version)</WebDocsDir>
    <CHMDocsDir>$(ModuleImageDir)\docs</CHMDocsDir>
    <VSDocsDir>$(ModuleImageDir)\docs\vs</VSDocsDir>
    <SandcastleModuleTempDir>$(ModuleTempDir)\docs</SandcastleModuleTempDir>

    <SandcastleProjectPath>docs\Docs.shfbproj</SandcastleProjectPath>
    <SandcastlePatchedProjectPath>docs\Docs.patched.shfbproj</SandcastlePatchedProjectPath>

    <SandcastleOutputPath>$(SandcastleModuleTempDir)\output</SandcastleOutputPath>
    <SandcastleIntellisensePath>$(SandcastleModuleTempDir)\intellisense</SandcastleIntellisensePath>
  </PropertyGroup>

  <ItemGroup Condition="'$(SkipDocumentation)'!='true'">
    <Feature Include="FEATURE_CHM_HELP" />
    <Feature Include="FEATURE_VS_HELP" />
  </ItemGroup>

  <Target Name="BuildDocs"
          DependsOnTargets="BuildDocs_Sandcastle;BuildDocs_NoSandcastle" />

  <Target Name="BuildDocs_Sandcastle"
          Condition="'$(SkipDocumentation)'!='true'">
    <Message Text="Building Docs..."
             Importance="High" />

    <Error Text="Sandcastle and Sandcastle Help File Builder must be installed to generate documentation.  To only generate Xml Intellisense docs without Sandcastle, build with '/p:SkipDocumentation=true'.  Be sure to also install the Sandcastle Styles patches.  Look in tools\Setup Files for the Sandcastle installers and patches."
           Condition="! Exists('$(SandcastlePath)') or ! Exists('$(SandcastleHelpFileBuilderPath)')" />

    <Error Text="Visual Studio 2005 or 2008 SDK must be installed so that HTML Help 2 (HxS) documentation can be generated for integration with the Visual Studio help system.  Check Microsoft's site for the Visual Studio SDK installer."
           Condition="! Exists('$(VSIPSDKHelpPath)')" />

    <Error Text="Microsoft HTML Help Workshop must be installed so that Compiled HTML help (CHM) documentation can be generated.  Look in tools\Setup Files for the Microsoft HTML Help Workshop installer."
           Condition="! Exists('$(HTMLHelpCompilerPath)')" />

    <PropertyGroup>
      <SandcastleDocumentationSources>@(DocumentedAssembly->'&lt;DocumentationSource sourceFile=&quot;%(FullPath)&quot; /&gt;&lt;DocumentationSource sourceFile=&quot;%(RootDir)%(Directory)%(Filename).xml&quot; /&gt;', '')</SandcastleDocumentationSources>
    </PropertyGroup>

    <Delete Files="$(CHMDocsDir)\Gallio.chm"
            Condition="Exists('$(CHMDocsDir)\Gallio.chm')" />
    <RemoveDir Directories="$(WebDocsDir);$(VSDocsDir);$(SandcastleModuleTempDir)" />
    
    <MakeDir Directories="$(WebDocsParentDir);$(CHMDocsDir);$(VSDocsDir);$(SandcastleModuleTempDir)" />

    <!-- Should be able to just override DocumentationSources but
         we get an error.

         SHFB : warning BHT0001: Unable to get executing project: Unable to obtain internal reference.  The specified project will be loaded but command line property overrides will be ignored. [C:\Source\MbUnit\v3\docs\Docs.shfbproj]

         So instead we generate a patched project file with the changes inline. -->

    <Copy SourceFiles="$(SandcastleProjectPath)"
          DestinationFiles="$(SandcastlePatchedProjectPath)" />

    <FileUpdate Files="$(SandcastlePatchedProjectPath)"
                SingleLine="true"
		Regex="&lt;DocumentationSources&gt;.*&lt;/DocumentationSources&gt;"
		ReplacementText="&lt;DocumentationSources&gt;$(SandcastleDocumentationSources)&lt;/DocumentationSources&gt;" />

    <MSBuild Projects="$(SandcastlePatchedProjectPath)"
             Properties="Version=$(Version);BuildDir=$(BuildDir);ModuleTempDir=$(ModuleTempDir);ReportDir=$(ModuleReportDir);CustomBeforeSHFBTargets=$(SandcastleProjectOverridesPath)" />

    <ItemGroup>
      <VSDocsFile Include="$(SandcastleOutputPath)\Gallio.HxC" />
      <VSDocsFile Include="$(SandcastleOutputPath)\Gallio.HxS" />
      <VSDocsFile Include="$(SandcastleOutputPath)\Gallio.HxT" />
      <VSDocsFile Include="$(SandcastleOutputPath)\Gallio_*.HxK" />
      <VSDocsFile Include="$(SandcastleOutputPath)\Gallio_H2Reg.ini" />
    </ItemGroup>

    <Move SourceFiles="@(VSDocsFile)"
          DestinationFolder="$(VSDocsDir)" />

    <Copy SourceFiles="$(SandcastleOutputPath)\Gallio.chm"
          DestinationFolder="$(CHMDocsDir)" />

    <!-- Note: We leave the CHM file in the docs folder for downloads from web. -->
    <Exec Command="move /y &quot;$(SandcastleOutputPath)&quot; &quot;$(WebDocsDir)&quot;" />

    <Delete Files="@(DocumentedAssembly->'$(ModuleImageDir)\bin\%(Folder)\%(Filename).xml')" />
    <Move SourceFiles="@(DocumentedAssembly->'$(SandcastleIntellisensePath)\%(Filename).xml')"
          DestinationFiles="@(DocumentedAssembly->'$(ModuleImageDir)\bin\%(Folder)\%(Filename).xml')" />
  </Target>

  <Target Name="BuildDocs_NoSandcastle"
          Condition="'$(SkipDocumentation)'=='true'">
    <Copy SourceFiles="@(DocumentedAssembly->'%(RootDir)%(Directory)%(Filename).xml')"
          DestinationFolder="$(ModuleImageDir)\bin\%(DocumentedAssembly.Folder)" />
  </Target>

  <!-- SUPPORT CODE: SOURCES FILE -->
  <Target Name="BuildSourcesFile"
          Condition="$(IncludeSources)">
    <Exec Command="svn.exe info --xml &quot;$(RootDir)&quot; > &quot;$(ModuleTempDir)\svninfo.xml&quot;" />

    <XmlQuery XmlFileName="$(ModuleTempDir)\svninfo.xml"
              XPath="/info/entry/url">
      <Output TaskParameter="Values" ItemName="SvnRepositoryItem" />
    </XmlQuery>
    <PropertyGroup>
      <SvnRepository>%(SvnRepositoryItem._value)</SvnRepository>
    </PropertyGroup>

    <XmlQuery XmlFileName="$(ModuleTempDir)\svninfo.xml"
              XPath="/info/entry/@revision">
      <Output TaskParameter="Values" PropertyName="SvnRevision" />
    </XmlQuery>

    <Error Text="Could not parse SVN info."
           Condition="'$(SvnRepository)'=='' or '$(SvnRevision)'==''" />

    <WriteLinesToFile File="$(ModuleImageDir)\Sources.txt"
                      Overwrite="true"
                      Lines="Gallio v$(AssemblyFileVersion) was generated from the following sources.%0A%0ASubversion Repository: $(SvnRepository)%0A           Revision: $(SvnRevision)%0A%0APlease visit the following Url for checkout instructions.%0Ahttp://code.google.com/p/mb-unit/source/checkout" />
  </Target>

  <!-- SUPPORT CODE: INSTALLERS -->

  <PropertyGroup>
    <InstallerWixProperties>
      Configuration=Release;
      Version=$(Version);
      TargetDir=$(ModuleDistDir)\;
      GallioTargetDir=$(ModuleImageDir);
      WixTargetsPath=$(ToolsDir)\Wix\Wix.targets;
      WixTasksPath=$(ToolsDir)\Wix\WixTasks.dll;
      WixToolPath=$(ToolsDir)\Wix;
      WixExtDir=$(ToolsDir)\Wix;
      DefineSolutionProperties=false
    </InstallerWixProperties>
    <InstallerFeatureFile>$(SourceDir)\Installer.Wix\Features.wxi</InstallerFeatureFile>
  </PropertyGroup>

  <Target Name="BuildInstaller"
          Condition="'$(Runtime)'!='Mono'"
          DependsOnTargets="BuildInstaller-x86;BuildInstaller-x64" />

  <Target Name="PrepareToBuildInstaller">
    <WriteLinesToFile File="$(InstallerFeatureFile)"
                      Lines="&lt;Include&gt;"
                      Overwrite="true" />
    <WriteLinesToFile File="$(InstallerFeatureFile)"
                      Lines="@(Feature -> '&lt;?define %(Identity)=&quot;true&quot; ?&gt;')"
                      Overwrite="false" />
    <WriteLinesToFile File="$(InstallerFeatureFile)"
                      Lines="&lt;/Include&gt;"
                      Overwrite="false" />

    <ParseVersion Version="$(FileVersion)">
      <Output TaskParameter="Major" PropertyName="MajorVersion" />
      <Output TaskParameter="Minor" PropertyName="MinorVersion" />
      <Output TaskParameter="Build" PropertyName="BuildNumber" />
    </ParseVersion>

    <PropertyGroup>
      <InstallerWixProperties>
        $(InstallerWixProperties);
        MajorVersion=$(MajorVersion);
        MinorVersion=$(MinorVersion);
        BuildNumber=$(BuildNumber)     
      </InstallerWixProperties>
    </PropertyGroup>
  </Target>

  <Target Name="BuildInstaller-x86" DependsOnTargets="PrepareToBuildInstaller">
    <Message Text="Building WiX Installer for x86..."
             Importance="High" />

    <MSBuild Projects="$(SourceDir)\Installer.Wix\GallioBundle.wixproj"
             Targets="Build"
             Properties="$(InstallerWixProperties);Platform=x86" />
  </Target>

  <Target Name="BuildInstaller-x64" DependsOnTargets="PrepareToBuildInstaller">
    <Message Text="Building WiX Installer for x64..."
             Importance="High" />

    <MSBuild Projects="$(SourceDir)\Installer.Wix\GallioBundle.wixproj"
             Targets="Build"
             Properties="$(InstallerWixProperties);Platform=x64" />
  </Target>

  <Target Name="CleanInstaller"
          Condition="'$(Runtime)'!='Mono'"
          DependsOnTargets="CleanInstaller-x86;CleanInstaller-x64">
    <Delete Files="$(InstallerFeatureFile)" />
  </Target>

  <Target Name="CleanInstaller-x86">
    <MSBuild Projects="$(SourceDir)\Installer.Wix\GallioBundle.wixproj"
             Targets="Clean"
             Properties="$(InstallerWixProperties);Platform=x86" />
  </Target>

  <Target Name="CleanInstaller-x64">
    <MSBuild Projects="$(SourceDir)\Installer.Wix\GallioBundle.wixproj"
             Targets="Clean"
             Properties="$(InstallerWixProperties);Platform=x64" />
  </Target>

  <Target Name="BuildZip">
    <Message Text="Build redistributable Zip archive..."
             Importance="High" />

    <CreateItem Include="$(ModuleImageDir)\**\*.*">
      <Output TaskParameter="Include" ItemName="ZipFiles" />
    </CreateItem>

    <Zip Files="@(ZipFiles)"
         WorkingDirectory="$(ModuleImageDir)"
         ZipFileName="$(ModuleDistDir)\GallioBundle-$(Version)$(VersionSuffix).zip"
         ZipLevel="9" />
  </Target>


  <!-- SUPPORT CODE: SOURCE SERVER INDEXING -->

  <Target Name="BuildSourceServerIndex"
                Condition="'$(SkipSourceServer)'!='true'">
    <Message Text="Generating source server index..."
             Importance="High" />

    <Warning Text="The Debugging Tools for Windows must be installed along with the Source Source SDK in order to embed Source Server indexing information in the PDBs.  Disable this message with /p:SkipSourceServer=true."
             Condition="! Exists('$(SourceServerIndexerPath)')" />

    <Exec Command="&quot;$(SourceServerIndexerPath)&quot; -System=svn -Ini=&quot;$(SourceDir)\srcsrv.ini&quot; -Source=&quot;$(SourceDir)&quot; -Symbols=&quot;$(ModuleImageDir)\bin&quot;"
          Condition="Exists('$(SourceServerIndexerPath)')" />
  </Target>


  <!-- SUPPORT CODE: TESTS -->

  <UsingTask TaskName="NCover.MSBuildTasks.NCoverReporting"
             AssemblyFile="$(NCoverInstallDir)\Build Task Plugins\NCover.MSBuildTasks.dll"/>

  <!-- Note: The Gallio MSBuildTasks assembly gets loaded lazily so it's ok
       to reference it even when it has yet to be built. -->
  <UsingTask AssemblyFile="$(ModuleImageDir)\bin\Gallio.MSBuildTasks.dll" TaskName="Gallio.MSBuildTasks.Gallio" />

  <PropertyGroup>
    <TestRunnerType Condition="$(Coverage)">NCover3</TestRunnerType>
    <TestRunnerType Condition="! $(Coverage)">IsolatedProcess</TestRunnerType>
    <TestRunnerType Condition="'$(Runtime)'=='Mono'">IsolatedAppDomain</TestRunnerType>

    <CoverageFilters>
    </CoverageFilters>
    <SatisfactoryCoverage>
        <Threshold>
            <CoverageMetric>SymbolCoverage</CoverageMetric>
            <Value>95.0</Value>
        </Threshold>
        <Threshold>
            <CoverageMetric>MethodCoverage</CoverageMetric>
            <Value>70</Value>
        </Threshold>
        <Threshold>
            <CoverageMetric>BranchCoverage</CoverageMetric>
            <Value>75</Value>
        </Threshold>
    </SatisfactoryCoverage>
  </PropertyGroup>
  <Target Name="RunTests">
    <Message Text="Running tests..."
             Importance="High" />

    <Delete Files="Coverage.xml"
            Condition="Exists('Coverage.xml')" />   

    <Gallio Condition="'$(Runtime)'=='CLR'"
            Files="@(TestAssembly)"
            ReportDirectory="$(ModuleReportDir)"
            ReportTypes="$(ReportTypes)"
            RunnerType="$(TestRunnerType)"
	    RunnerProperties="NCoverArguments='//eas .*.Tests%3B.*.TestResources%3BJetBrains.*%3BAga.Controls%3BConfiguration%3BDevExpress.*%3BEnvDTE.*%3BNAnt.*%3BcsUnit.*%3Bnunit.*%3Bxunit.*%3BQuickGraph.*%3BMbUnit.Framework%3BRhino.Mocks%3BTestDriven.Framework%3BWeifenLuo.*%3Blog4net%3BISymWrapper%3BICSharpCode.TextEditor%3BIronRuby.*%3BIronPython.* //et Castle.*%3BMono.*%3BCecil.*%3BSharpen.*%3BDb4objects.*%3BICSharpCode.*'"
            ShowReports="$(ShowReports)"
	    Verbosity="Verbose"
	    IgnoreFailures="true"
	    RunTimeLimit="2700">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Gallio>

    <Exec Condition="'$(Runtime)'=='Mono'"
          Command="&quot;$(MonoExe)&quot; &quot;$(ModuleImageDir)\bin\Gallio.Echo.exe&quot; @(TestAssembly->'&quot;%(FullPath)&quot;', ' ') /rd:&quot;$(ModuleReportDir)&quot; /rt:&quot;$(ReportTypes)&quot; /r:&quot;$(TestRunnerType)&quot; /v:Verbose"
          IgnoreExitCode="true"
	  WorkingDirectory="$(ModuleTempDir)">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>

    <NCoverReporting Condition="$(Coverage) and Exists('Coverage.xml')"
                    CoverageDataPaths="Coverage.xml"
                    OutputPath="$(ModuleReportDir)\CoverageReport.xml"
		    ProjectName="Gallio"
		    ReportDataFilter="Assembly, Namespace"
		    ReportFormat="Xml"
		    ReportType="SymbolModuleNamespaceClassMethod"
		    SortBy="ClassLine"
		    MaxTopUncoveredToReport="20"
		    CoverageFilters="$(CoverageFilters)"
                    SatisfactoryCoverage="$(SatisfactoryCoverage)" />

    <Exec Command="cscript //nologo &quot;$(BinDir)\Run.vbs&quot; &quot;'$(NCoverInstallDir)\NCover.Explorer.exe' Coverage.xml&quot;"
          Condition="$(ShowReports) and $(Coverage) and Exists('Coverage.xml')" />

    <Error Text="Some tests failed!"
             Condition="'$(ExitCode)'!='0' and ! $(IgnoreFailures)" />
    <Warning Text="Some tests failed!"
             Condition="'$(ExitCode)'!='0' and $(IgnoreFailures)" />
  </Target>  

  <Target Name="VerifyInstallation">
    <Message Text="Verifying installation of all plugins..."
             Importance="High" />

    <Exec Command="&quot;$(ModuleImageDir)\bin\Gallio.Utility.exe&quot; /v:Verbose VerifyInstallation"
          IgnoreExitCode="true"
	  WorkingDirectory="$(ModuleTempDir)">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>
    
    <Error Text="Verification of plugin installation failed!"
             Condition="'$(ExitCode)'!='0' and ! $(IgnoreFailures)" />
  </Target>

  <Target Name="VerifyProjectsSynchronized"
          Condition="'$(SkipSyncProjects)'!='true'">
    <Message Text="Verifying that all VS 2008 and VS 2010 projects are synchronized..."
             Importance="High" />

    <Exec Command="&quot;$(SourceDir)\Compare VS2010 Projects.bat&quot;"
          IgnoreExitCode="true"
	  WorkingDirectory="$(SourceDir)">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>
    
    <Error Text="There appear to be some differences between the project items of the VS 2008 projects and those of the VS 2010 projects.  Please run 'Sync VS2010 Projects.bat' to synchronize project items.  Disable this message with /p:SkipSyncProjects=true."
             Condition="'$(ExitCode)'!='0' and ! $(IgnoreFailures)" />
  </Target>  
</Project>
