<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5"
  DefaultTargets="Compile;Image;Dist;Test">
  <!-- 
    Build system targets for modules.
    Refer to the wiki for documentation.
  -->

  <!-- Custom Tasks -->
  
  <PropertyGroup>
    <MSBuildCommunityTasksPath>$(RootDir)\tools\MSBuild Community Tasks</MSBuildCommunityTasksPath>    
  </PropertyGroup>
  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" /> 
  
  <UsingTask TaskName="ParseVersion"
             AssemblyFile="Gallio.BuildTools.Tasks.dll" />
  <UsingTask TaskName="SGenMultipleTypes"
             AssemblyFile="Gallio.BuildTools.Tasks.dll" />
  
  <!-- Item Definitions -->
  
  <ItemDefinitionGroup>
    <CSharpProject>
      <ImageContentPath />
      <ImageOutputPath />
    </CSharpProject>

    <VBProject>
      <ImageContentPath />
      <ImageOutputPath />
    </VBProject>
    
    <JSharpProject>
      <ImageContentPath />
      <ImageOutputPath />
    </JSharpProject>
    
    <File>
      <ImagePath>.</ImagePath>
    </File>

    <AssemblyFile>
      <ImagePath>.</ImagePath>
    </AssemblyFile>

    <PdbFile>
      <ImagePath>.</ImagePath>
    </PdbFile>

    <XmlDocFile>
      <ImagePath>.</ImagePath>
    </XmlDocFile>

    <PluginFile>
      <ImagePath>.</ImagePath>
    </PluginFile>
    
    <ConfigFile>
      <ImagePath>.</ImagePath>
    </ConfigFile>

    <LicenseFile>
      <ImagePath>.</ImagePath>
    </LicenseFile>
    
    <Zip>
      <BaseDir />
      <ImagePath />
    </Zip>
    
    <ExportArchive>
      <ImagePath />
    </ExportArchive>
    
    <TestAssembly />
    <Feature />
    
    <ReleaseArchive />
    
    <Installer />
  </ItemDefinitionGroup>
  
  <!-- External Properties -->
  
  <PropertyGroup>
    <StartDir Condition="'$(StartDir)'==''">$(MSBuildStartupDirectory)</StartDir>
    <SourceDir Condition="'$(SourceDir)'==''">$(RootDir)\src</SourceDir>
    <ToolsDir Condition="'$(ToolsDir)'==''">$(RootDir)\tools</ToolsDir>
    <BuildDir Condition="'$(BuildDir)'==''">$(RootDir)\build</BuildDir>
    <TempDir Condition="'$(TempDir)'==''">$(BuildDir)\temp</TempDir>
    <ReportDir Condition="'$(ReportDir)'==''">$(BuildDir)\report</ReportDir>
    <ModulesDir Condition="'$(ModulesDir)'==''">$(BuildDir)\modules</ModulesDir>
  
    <ModuleDir>$(MSBuildProjectDirectory)</ModuleDir>
    <ModuleName>$(MSBuildProjectName)</ModuleName>
    
    <ModuleBuildDir>$(ModulesDir)\$(ModuleName)</ModuleBuildDir>
    <ModuleTempDir>$(ModuleBuildDir)\temp</ModuleTempDir>
    <ModuleReportDir>$(ModuleBuildDir)\report</ModuleReportDir>
    <ModuleImageDir>$(ModuleBuildDir)\image</ModuleImageDir>
    <ModuleMetaDir>$(ModuleBuildDir)\meta</ModuleMetaDir>
    <ModuleDistDir>$(ModuleBuildDir)\dist</ModuleDistDir>
    
    <SkipDependencies Condition="'$(SkipDependencies)'==''">false</SkipDependencies>
    <SkipSyncProjects Condition="'$(SkipSyncProjects)'==''">false</SkipSyncProjects>
    <SkipILMerge Condition="'$(SkipILMerge)'==''">false</SkipILMerge>
    <SkipSources Condition="'$(SkipSources)'==''">false</SkipSources>
    <SkipSourceServer Condition="'$(SkipSourceServer)'==''">false</SkipSourceServer>
    <SkipDocumentation Condition="'$(SkipDocumentation)'==''">false</SkipDocumentation>
    <SkipArchive Condition="'$(SkipArchive)'==''">false</SkipArchive>
    <SkipInstaller Condition="'$(SkipInstaller)'==''">false</SkipInstaller>
    
    <BuildInParallel Condition="'$(BuildInParallel)'==''">true</BuildInParallel>
    <StopOnFirstFailure Condition="'$(StopOnFirstFailure)'==''">true</StopOnFirstFailure>
    
    <AssemblyVersion Condition="'$(AssemblyVersion)'==''">0.0.0.0</AssemblyVersion>
    <FileVersion Condition="'$(FileVersion)'==''">0.0.0.0</FileVersion>
    
    <DotNetFrameworkVersion Condition="'$(DotNetFrameworkVersion)'=='' and Exists('$(SystemRoot)\Microsoft.Net\Framework\v4.0.30128')">4.0</DotNetFrameworkVersion>
    <DotNetFrameworkVersion Condition="'$(DotNetFrameworkVersion)'==''">3.5</DotNetFrameworkVersion>
    
    <ProjectVariant></ProjectVariant>
    <ProjectVariant Condition="'$(DotNetFrameworkVersion)'=='4.0'">.vs2010</ProjectVariant>
    <ProjectVariantExplicit>.vs2008</ProjectVariantExplicit>
    <ProjectVariantExplicit Condition="'$(DotNetFrameworkVersion)'=='4.0'">.vs2010</ProjectVariantExplicit>
  </PropertyGroup>
 
  <!-- External Targets -->
  
  <PropertyGroup>
	<PreconditionDependsOn>PrintPreconditionBanner;CheckRootDir;BeforePrecondition;CorePrecondition;AfterPrecondition</PreconditionDependsOn>
	<CleanDependsOn>Precondition;PrintCleanBanner;BeforeClean;CoreClean;AfterClean;DeleteModuleBuildTree;DeleteBuildTree</CleanDependsOn>
	<CompileDependsOn>Precondition;PrintCompileBanner;CreateBuildTree;CreateModuleBuildTree;BeforeCompile;CoreCompile;AfterCompile</CompileDependsOn>
	<ImageDependsOn>Precondition;PrintImageBanner;CreateBuildTree;CreateModuleBuildTree;BeforeImage;CoreImage;AfterImage</ImageDependsOn>
	<DistDependsOn>Precondition;PrintDistBanner;CreateBuildTree;CreateModuleBuildTree;BeforeDist;CoreDist;AfterDist</DistDependsOn>
	<TestDependsOn>Precondition;PrintTestBanner;CreateBuildTree;CreateModuleBuildTree;BeforeTest;CoreTest;AfterTest</TestDependsOn>
  </PropertyGroup>
  
  <Target Name="Precondition"
          DependsOnTargets="$(PreconditionDependsOn)" />
  <Target Name="Clean"
          DependsOnTargets="$(CleanDependsOn)" />
  <Target Name="Compile"
          DependsOnTargets="$(CompileDependsOn)" />
  <Target Name="Image"
          DependsOnTargets="$(ImageDependsOn)" />
  <Target Name="Dist"
          DependsOnTargets="$(DistDependsOn)" />
  <Target Name="Test"
          DependsOnTargets="$(TestDependsOn)" />

  <!-- Overridable Targets -->
  
  <Target Name="BeforePrecondition" />
  <Target Name="AfterPrecondition" />
  <Target Name="BeforeClean" />
  <Target Name="AfterClean" />
  <Target Name="BeforeCompile" />
  <Target Name="AfterCompile" />
  <Target Name="BeforeImage" />
  <Target Name="AfterImage" />
  <Target Name="BeforeDist" />
  <Target Name="AfterDist" />
  <Target Name="BeforeTest" />
  <Target Name="AfterTest" />

  <!-- Preconditions -->
  
  <Target Name="CheckRootDir">
    <Error Condition="'$(RootDir)'==''"
	       Text="RootDir must be set." />
  </Target>  
  
  <!-- Banner Text -->
  
  <Target Name="PrintPreconditionBanner">
    <Message Importance="High" Text="%0A[Precondition]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Precondition: $(ModuleName)" />
  </Target>
  <Target Name="PrintCleanBanner">
    <Message Importance="High" Text="%0A[Clean]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Clean: $(ModuleName)" />
  </Target>
  <Target Name="PrintCompileBanner">
    <Message Importance="High" Text="%0A[Compile]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Compile: $(ModuleName)" />
  </Target>
  <Target Name="PrintImageBanner">
    <Message Importance="High" Text="%0A[Image]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Image: $(ModuleName)" />
  </Target>
  <Target Name="PrintDistBanner">
    <Message Importance="High" Text="%0A[Dist]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Dist: $(ModuleName)" />
  </Target>
  <Target Name="PrintTestBanner">
    <Message Importance="High" Text="%0A[Test]%0A"
             Condition="'$(Main)'=='true'" />
    <Message Importance="Normal" Text="Test: $(ModuleName)" />
  </Target>
  
  <!-- Core Targets -->
  
  <PropertyGroup>
    <CorePreconditionDependsOn>
        RecursivePrecondition;
    </CorePreconditionDependsOn>
    <CoreCleanDependsOn>
        RecursiveClean;
        PopulateCommonProjects;
        CleanCommonProjects;
        CleanInstaller;
    </CoreCleanDependsOn>
    <CoreCompileDependsOn>
        RecursiveCompile;
        PopulateCommonProjects;
        CompileCommonProjects;
    </CoreCompileDependsOn>
    <CoreImageDependsOn>
        RecursiveImage;
        ImageInheritedModules;
        PopulateCommonProjects;
        ImageCommonProjects;
        MapFilesToCopy;
        ImageFilesToCopy;
        ImageZips;
        ImageExportArchives;
        ImagePluginFiles;
        ImageConfigFiles;
        WriteTestAssemblyItemsToMeta;
        WriteXmlDocFileItemsToMeta;
        WriteFeatureItemsToMeta;
    </CoreImageDependsOn>
    <CoreDistDependsOn>
        RecursiveDist;
        DistReleaseArchive;
        DistInstaller;
    </CoreDistDependsOn>
    <CoreTestDependsOn>
        RecursiveTest;
    </CoreTestDependsOn>
  </PropertyGroup>
  
  <Target Name="CorePrecondition"
          DependsOnTargets="$(CorePreconditionDependsOn)" />
  <Target Name="CoreClean"
          DependsOnTargets="$(CoreCleanDependsOn)" />  
  <Target Name="CoreCompile"
          DependsOnTargets="$(CoreCompileDependsOn)" />  
  <Target Name="CoreImage"
          DependsOnTargets="$(CoreImageDependsOn)" />
  <Target Name="CoreDist"
          DependsOnTargets="$(CoreDistDependsOn)" />
  <Target Name="CoreTest"
          DependsOnTargets="$(CoreTestDependsOn)" />
  
  <!-- Recursive Targets -->

  <PropertyGroup>
    <Main Condition="'$(Main)'==''">true</Main>
    
    <RecursiveProperties>
        Main=false;
        RootDir=$(RootDir);
        StartDir=$(StartDir);
        SourceDir=$(SourceDir);
        BuildDir=$(BuildDir);
        ToolsDir=$(ToolsDir);
        SkipModules=$(SkipModules);
        FileVersion=$(FileVersion);
        AssemblyVersion=$(AssemblyVersion);
        DotNetFrameworkVersion=$(DotNetFrameworkVersion);
    </RecursiveProperties>
    
    <Recurse>false</Recurse>
    <Recurse Condition="'$(SkipDependencies)'!='true' or '$(Main)'=='true'">true</Recurse>
  </PropertyGroup>
  
  <ItemGroup>
    <SkipModule Include="$(SkipModules)"
                Condition="'$(SkipModules)'!=''" />
  </ItemGroup>
  
  <Target Name="PopulateRecursiveModules"
          Condition="'@(Module)'!='' and $(Recurse)">
    <FindInList List="@(Module)"
                ItemSpecToFind="%(SkipModule.Identity).module"
                Condition="'@(SkipModule)'!=''"
                MatchFileNameOnly="true"
                CaseSensitive="false">
      <Output TaskParameter="ItemFound" ItemName="_SkippedModule" />
    </FindInList>

    <Message Importance="High"
             Text="Skipping modules: @(_SkippedModule->'%(FileName)', ' ')"
             Condition="'@(_SkippedModule)'!=''" />
    
    <ItemGroup>
      <RecursiveModule Include="@(Module)" />
      <RecursiveModule Remove="@(_SkippedModule)" Condition="'@(_SkippedModule)'!=''" />
    </ItemGroup>
  </Target>
  
  <Target Name="RecursivePrecondition"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Precondition" />
             
    <OnError ExecuteTargets="ModuleError" />
  </Target>
  
  <Target Name="RecursiveClean"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Clean" />
             
    <OnError ExecuteTargets="ModuleError" />
  </Target>
  
  <Target Name="RecursiveCompile"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Compile" />
             
    <OnError ExecuteTargets="ModuleError" />
  </Target>
  
  <Target Name="RecursiveImage"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Image" />
             
    <OnError ExecuteTargets="ModuleError" />
  </Target>
  
  <Target Name="RecursiveDist"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Dist" />
             
    <OnError ExecuteTargets="ModuleError" />
  </Target>
  
  <Target Name="RecursiveTest"
          DependsOnTargets="PopulateRecursiveModules">
    <MSBuild Projects="@(RecursiveModule)"
             Properties="$(RecursiveProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Condition="'@(RecursiveModule)'!=''"
             Targets="Test" />
             
    <OnError ExecuteTargets="ModuleError" />
  </Target>  
  
  <Target Name="ModuleError">
    <Error Text="One or more modules failed to build.%0ATo exclude these modules from the build, call MSBuild with /p:SkipModules=Module1;Module2;..."
           Condition="'$(Main)'=='true'" />
  </Target>
  
  <!-- Build Tree Setup / TearDown Targets -->
  
  <Target Name="CreateBuildTree"
          Condition="'$(Main)'=='true'">
    <MakeDir Directories="$(BuildDir);$(TempDir);$(ReportDir);$(ModulesDir)" />
  </Target>
  
  <Target Name="DeleteBuildTree"
          Condition="'$(Main)'=='true'">
    <RemoveDir Directories="$(BuildDir)" />
  </Target>
  
  <Target Name="CreateModuleBuildTree">
    <MakeDir Directories="$(ModuleBuildDir);$(ModuleTempDir);$(ModuleReportDir);$(ModuleImageDir);$(ModuleMetaDir);$(ModuleDistDir)" />
  </Target>
  
  <Target Name="DeleteModuleBuildTree">
    <RemoveDir Directories="$(ModuleBuildDir)" />
  </Target>
  
  <!-- Declarative Item Processing Targets -->

  <Target Name="ImageInheritedModules"
          Condition="'@(Module)'!=''">
    <CreateItem Include="$(ModulesDir)\%(Module.FileName)\image\**\*"
                Condition="'%(Module.Inherit)'=='true'">
      <Output TaskParameter="Include" ItemName="_InheritedImageFile" />
    </CreateItem>
    <CreateItem Include="$(ModulesDir)\%(Module.FileName)\meta\**\*"
                Condition="'%(Module.Inherit)'=='true'">
      <Output TaskParameter="Include" ItemName="_InheritedMetaFile" />
    </CreateItem>
  
    <Copy SourceFiles="@(_InheritedImageFile)"
          DestinationFiles="@(_InheritedImageFile->'$(ModuleImageDir)\%(RecursiveDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true"
          Condition="'@(_InheritedImageFile)'!=''" />
    <Copy SourceFiles="@(_InheritedMetaFile)"
          DestinationFiles="@(_InheritedMetaFile->'$(ModuleMetaDir)\%(RecursiveDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true"
          Condition="'@(_InheritedMetaFile)'!=''" />
  </Target>
  
  <PropertyGroup>
    <CommonProjectProperties>
      RootDir=$(RootDir);
      CustomAfterMicrosoftCommonTargets=$(RootDir)\bin\Custom.After.Microsoft.Common.targets;
      ProjectAssemblyFileVersion=$(FileVersion);
      ProjectAssemblyVersion=$(AssemblyVersion);
    </CommonProjectProperties>
  </PropertyGroup>
  
  <Target Name="PopulateCommonProjects">
    <ItemGroup>
      <CommonProject Include="@(CSharpProject);@(VBProject);@(JSharpProject)" />
    </ItemGroup>
  </Target>
  
  <Target Name="CleanCommonProjects"
          Condition="'@(CommonProject)'!=''">
    <MSBuild Projects="@(CommonProject)"
             Properties="$(CommonProjectProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Targets="Clean" />
  </Target>
  
  <Target Name="CompileCommonProjects"
          Condition="'@(CommonProject)'!=''">
    <MSBuild Projects="@(CommonProject)"
             Properties="$(CommonProjectProperties)"
             BuildInParallel="$(BuildInParallel)"
             StopOnFirstFailure="$(StopOnFirstFailure)"
             Targets="Build" />
  </Target>
  
  <Target Name="ImageCommonProjects"
          DependsOnTargets="CopyCommonProjectContentToImage;CopyCommonProjectOutputToImage"
          Condition="'@(CommonProject)'!=''" />
  
  <Target Name="CopyCommonProjectContentToImage"
          Outputs="%(CommonProject.ContentPath)">
    <MSBuild Projects="@(CommonProject)"
             Condition="'%(CommonProject.OutputPath)'!=''"
             Targets="GetContentToCopy">
      <Output TaskParameter="TargetOutputs" ItemName="CommonProjectContentToCopy" />
    </MSBuild>

    <CreateProperty Value="%(CommonProject.ContentPath)">
      <Output TaskParameter="Value" PropertyName="_ProjectContentPath" />
    </CreateProperty>

    <Copy SourceFiles="@(CommonProjectContentToCopy)"
          Condition="'@(CommonProjectContentToCopy)'!=''"
          SkipUnchangedFiles="true"
          DestinationFiles="@(CommonProjectContentToCopy->'$(_ProjectContentPath)\%(TargetPath)')" />

    <ItemGroup>
      <CommonProjectContentToCopy Remove="**\*" />
    </ItemGroup>
  </Target>

  <Target Name="CopyCommonProjectOutputToImage"
          Outputs="%(CommonProject.OutputPath)">
    <MSBuild Projects="@(CommonProject)"
             Condition="'%(CommonProject.OutputPath)'!=''"
             Targets="GetOutputToCopy">
      <Output TaskParameter="TargetOutputs" ItemName="CommonProjectOutputToCopy" />
    </MSBuild>

    <CreateProperty Value="%(CommonProject.OutputPath)">
      <Output TaskParameter="Value" PropertyName="_ProjectOutputPath" />
    </CreateProperty>

    <Copy SourceFiles="@(CommonProjectOutputToCopy)"
          Condition="'@(CommonProjectOutputToCopy)'!=''"
          SkipUnchangedFiles="true"
          DestinationFiles="@(CommonProjectOutputToCopy->'$(_ProjectOutputPath)\%(TargetPath)')" />

    <ItemGroup>
      <CommonProjectOutputToCopy Remove="**\*" />
    </ItemGroup>    
  </Target>
  
  <Target Name="MapFilesToCopy">
    <ItemGroup>
      <_FileToCopy Include="@(File);@(AssemblyFile);@(PdbFile);@(XmlDocFile);@(ConfigFile);@(PluginFile);@(LicenseFile)" />
    </ItemGroup>
  </Target>
  
  <Target Name="ImageFilesToCopy"
          Condition="'@(_FileToCopy)'!=''">
    <MakeDir Directories="@(_FileToCopy->'$(ModuleImageDir)\%(ImagePath)')"
             Condition="'%(ImagePath)'!=''" />

    <Copy SourceFiles="@(_FileToCopy)"
          Condition="'%(ImagePath)'!=''"
          DestinationFiles="@(_FileToCopy->'$(ModuleImageDir)\%(ImagePath)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>
  
  <Target Name="ImageZips"
          Condition="'@(Zip)'!=''">
    <Zip Files="@(Zip)"
         Condition="'%(ImagePath)'!=''"
	 WorkingDirectory="%(BaseDir)"
	 ZipFileName="$(ModuleImageDir)\%(ImagePath)" />
  </Target>

  <Target Name="ImageExportArchives"
          Condition="'@(ExportArchive)'!=''">
    <Error Text="ImagePath must be specified for ExportArchive '%(ExportArchive.Identity)'."
           Condition="'%(ExportArchive.ImagePath)'==''" />

    <CreateItem Include="$(ModuleTempDir)\%(ExportArchive.ImagePath)">
      <Output TaskParameter="Include" ItemName="_ExportArchiveTempDir" />
    </CreateItem>

    <RemoveDir Directories="@(_ExportArchiveTempDir)" />

    <MakeDir Directories="@(_ExportArchiveTempDir->'%(RootDir)%(Directory)')" />

    <SvnExport RepositoryPath="%(ExportArchive.FullPath)"
               LocalPath="$(ModuleTempDir)\%(ExportArchive.ImagePath)" />

    <CreateItem Include="$(ModuleImageDir)\%(ExportArchive.ImagePath)">
      <Output TaskParameter="Include" ItemName="_ExportArchiveZipFile" />
    </CreateItem>

    <MakeDir Directories="@(_ExportArchiveZipFile->'%(RootDir)%(Directory)')" />

    <CreateItem Include="$(ModuleTempDir)\%(ExportArchive.ImagePath)\**\*"
                AdditionalMetadata="ImagePath=%(ExportArchive.ImagePath)">
      <Output TaskParameter="Include" ItemName="_ExportArchiveItemFile" />
    </CreateItem>

    <Zip Files="@(_ExportArchiveItemFile)"
         Condition="'@(_ExportArchiveItemFile)'!=''"
         WorkingDirectory="$(ModuleTempDir)\%(_ExportArchiveItemFile.ImagePath)"
         ZipFileName="$(ModuleImageDir)\%(_ExportArchiveItemFile.ImagePath)"
         ZipLevel="9" />
  </Target>

  <Target Name="ImagePluginFiles"
          Condition="'@(PluginFile)'!=''">
    <FileUpdate Files="@(PluginFile->'$(ModuleImageDir)\%(ImagePath)\%(Filename)%(Extension)')"
                Regex="0\.0\.0\.0"
                ReplacementText="$(AssemblyVersion)" />
  </Target>
  
  <Target Name="ImageConfigFiles"
          Condition="'@(ConfigFile)'!=''">
    <FileUpdate Files="@(ConfigFile->'$(ModuleImageDir)\%(ImagePath)\%(Filename)%(Extension)')"
                Regex="0\.0\.0\.0"
                ReplacementText="$(AssemblyVersion)" />
  </Target>
  
  <!-- Run Tests -->
  
  <Target Name="WriteTestAssemblyItemsToMeta">
    <WriteLinesToFile File="$(ModuleMetaDir)\$(ModuleName).testassemblies"
                      Lines="@(TestAssembly->'%(FullPath)')"
                      Overwrite="true" />
  </Target>
  
  <Target Name="ReadMergedTestAssemblyItemsFromMeta">
    <ItemGroup>
      <_TestAssembliesFile Include="$(ModuleMetaDir)\*.testassemblies" />
    </ItemGroup>
  
    <ReadLinesFromFile File="%(_TestAssembliesFile.FullPath)"
                       Condition="'@(_TestAssembliesFile)'!=''">
      <Output TaskParameter="Lines" ItemName="_MergedTestAssembly" />
    </ReadLinesFromFile>
    
    <RemoveDuplicates Inputs="@(_MergedTestAssembly)">
      <Output TaskParameter="Filtered" ItemName="MergedTestAssembly" />
    </RemoveDuplicates>
  </Target>
  
  <!-- Generate Documentation -->
  
  <Target Name="WriteXmlDocFileItemsToMeta">
    <WriteLinesToFile File="$(ModuleMetaDir)\$(ModuleName).xmldocfiles"
                      Lines="@(XmlDocFile->'%(FullPath)')"
                      Overwrite="true" />
  </Target>
  
  <Target Name="ReadMergedXmlDocFileItemsFromMeta">
    <ItemGroup>
      <_XmlDocFilesFile Include="$(ModuleMetaDir)\*.xmldocfiles" />
    </ItemGroup>
  
    <ReadLinesFromFile File="%(_XmlDocFilesFile.FullPath)"
                       Condition="'@(_XmlDocFilesFile)'!=''">
      <Output TaskParameter="Lines" ItemName="_MergedXmlDocFile" />
    </ReadLinesFromFile>
    
    <RemoveDuplicates Inputs="@(_MergedXmlDocFile)">
      <Output TaskParameter="Filtered" ItemName="MergedXmlDocFile" />
    </RemoveDuplicates>
  </Target>
  
  <!-- Generate Release Archive -->
  
  <Target Name="DistReleaseArchive"
          Condition="'@(ReleaseArchive)'!=''">
    <Message Text="Build redistributable Zip archive @(ReleaseArchive)..."
             Importance="High" />

    <CreateItem Include="$(ModuleImageDir)\**\*.*">
      <Output TaskParameter="Include" ItemName="_ReleaseArchiveFiles" />
    </CreateItem>

    <Zip Files="@(_ReleaseArchiveFiles)"
         WorkingDirectory="$(ModuleImageDir)"
         ZipFileName="$(ModuleDistDir)\%(ReleaseArchive.Identity)-$(FileVersion).zip"
         ZipLevel="9" />
  </Target>
  
  <!-- Generate Installer -->
  
  <PropertyGroup>
    <InstallerWixProperties>
      Configuration=Release;
      Version=$(Version);
      TargetDir=$(ModuleDistDir)\;
      GallioTargetDir=$(ModuleImageDir);
      WixTargetsPath=$(ToolsDir)\Wix\Wix.targets;
      WixTasksPath=$(ToolsDir)\Wix\WixTasks.dll;
      WixToolPath=$(ToolsDir)\Wix;
      WixExtDir=$(ToolsDir)\Wix;
      DefineSolutionProperties=false
    </InstallerWixProperties>
    <InstallerSourceDir>$(SourceDir)\Installer.Wix</InstallerSourceDir>
    <InstallerFeatureFile>$(InstallerSourceDir)\Features.wxi</InstallerFeatureFile>
  </PropertyGroup>
  
  <Target Name="WriteFeatureItemsToMeta">
    <WriteLinesToFile File="$(ModuleMetaDir)\$(ModuleName).features"
                      Lines="@(Feature)"
                      Overwrite="true" />
  </Target>
  
  <Target Name="ReadMergedFeatureItemsFromMeta">
    <ItemGroup>
      <_FeaturesFile Include="$(ModuleMetaDir)\*.features" />
    </ItemGroup>
  
    <ReadLinesFromFile File="%(_FeaturesFile.FullPath)"
                       Condition="'@(_FeaturesFile)'!=''">
      <Output TaskParameter="Lines" ItemName="_MergedFeature" />
    </ReadLinesFromFile>
    
    <RemoveDuplicates Inputs="@(_MergedFeature)">
      <Output TaskParameter="Filtered" ItemName="MergedFeature" />
    </RemoveDuplicates>
  </Target>

  <Target Name="DistInstaller"
          Condition="'@(Installer)'!=''"
          DependsOnTargets="DistInstaller-x86;DistInstaller-x64" />

  <Target Name="PrepareToDistInstaller"
          DependsOnTargets="ReadMergedFeatureItemsFromMeta">
    <WriteLinesToFile File="$(InstallerFeatureFile)"
                      Lines="&lt;Include&gt;"
                      Overwrite="true" />
    <WriteLinesToFile File="$(InstallerFeatureFile)"
                      Lines="@(Feature -> '&lt;?define %(Identity)=&quot;true&quot; ?&gt;')"
                      Overwrite="false" />
    <WriteLinesToFile File="$(InstallerFeatureFile)"
                      Lines="&lt;/Include&gt;"
                      Overwrite="false" />

    <ParseVersion Version="$(FileVersion)">
      <Output TaskParameter="Major" PropertyName="_InstallerMajorVersion" />
      <Output TaskParameter="Minor" PropertyName="_InstallerMinorVersion" />
      <Output TaskParameter="Build" PropertyName="_InstallerBuildNumber" />
    </ParseVersion>

    <PropertyGroup>
      <InstallerWixProperties>
        $(InstallerWixProperties);
        MajorVersion=$(_InstallerMajorVersion);
        MinorVersion=$(_InstallerMinorVersion);
        BuildNumber=$(_InstallerBuildNumber)     
      </InstallerWixProperties>
    </PropertyGroup>
  </Target>

  <Target Name="DistInstaller-x86"
          Condition="'@(Installer)'!=''"
          DependsOnTargets="PrepareToDistInstaller">
    <Message Text="Building WiX Installer @(Installer) for x86..."
             Importance="High" />

    <MSBuild Projects="$(InstallerSourceDir)\%(Installer.Identity).wixproj"
             Targets="Build"
             Properties="$(InstallerWixProperties);Platform=x86" />
  </Target>

  <Target Name="DistInstaller-x64"
          Condition="'@(Installer)'!=''"
          DependsOnTargets="PrepareToDistInstaller">
    <Message Text="Building WiX Installer @(Installer) for x64..."
             Importance="High" />

    <MSBuild Projects="$(InstallerSourceDir)\%(Installer.Identity).wixproj"
             Targets="Build"
             Properties="$(InstallerWixProperties);Platform=x64" />
  </Target>

  <Target Name="CleanInstaller"
          Condition="'@(Installer)'!=''"
          DependsOnTargets="CleanInstaller-x86;CleanInstaller-x64">
    <Delete Files="$(InstallerFeatureFile)" />
  </Target>

  <Target Name="CleanInstaller-x86"
          Condition="'@(Installer)'!=''">
    <MSBuild Projects="$(InstallerSourceDir)\%(Installer.Identity).wixproj"
             Targets="Clean"
             Properties="$(InstallerWixProperties);Platform=x86" />
  </Target>

  <Target Name="CleanInstaller-x64"
          Condition="'@(Installer)'!=''">
    <MSBuild Projects="$(InstallerSourceDir)\%(Installer.Identity).wixproj"
             Targets="Clean"
             Properties="$(InstallerWixProperties);Platform=x64" />
  </Target>  
</Project>